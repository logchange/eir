
package dev.logchange.eir.format.gitlab;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;


/**
 * Describes the vulnerability using GitLab Flavored Markdown
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "id",
    "name",
    "description",
    "severity",
    "solution",
    "identifiers",
    "links",
    "details",
    "tracking",
    "flags"
})
@Generated("jsonschema2pojo")
public class Vulnerability {

    /**
     * Unique identifier of the vulnerability. This is recommended to be a UUID.
     * (Required)
     * 
     */
    @JsonProperty("id")
    @JsonPropertyDescription("Unique identifier of the vulnerability. This is recommended to be a UUID.")
    public String id;
    /**
     * The name of the vulnerability. This must not include the finding's specific information.
     * 
     */
    @JsonProperty("name")
    @JsonPropertyDescription("The name of the vulnerability. This must not include the finding's specific information.")
    public String name;
    /**
     * A long text section describing the vulnerability more fully.
     * 
     */
    @JsonProperty("description")
    @JsonPropertyDescription("A long text section describing the vulnerability more fully.")
    public String description;
    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     * 
     */
    @JsonProperty("severity")
    @JsonPropertyDescription("How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.")
    public Severity severity;
    /**
     * Explanation of how to fix the vulnerability.
     * 
     */
    @JsonProperty("solution")
    @JsonPropertyDescription("Explanation of how to fix the vulnerability.")
    public String solution;
    /**
     * An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
     * (Required)
     * 
     */
    @JsonProperty("identifiers")
    @JsonPropertyDescription("An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.")
    public List<Identifier> identifiers = null;
    /**
     * An array of references to external documentation or articles that describe the vulnerability.
     * 
     */
    @JsonProperty("links")
    @JsonPropertyDescription("An array of references to external documentation or articles that describe the vulnerability.")
    public List<Link> links = null;

    @JsonProperty("details")
    public Details details;
    /**
     * Describes how this vulnerability should be tracked as the project changes.
     * 
     */
    @JsonProperty("tracking")
    @JsonPropertyDescription("Describes how this vulnerability should be tracked as the project changes.")
    public Object tracking;
    /**
     * Flags that can be attached to vulnerabilities.
     * 
     */
    @JsonProperty("flags")
    @JsonPropertyDescription("Flags that can be attached to vulnerabilities.")
    public List<FlagItem> flags = null;
    @JsonIgnore
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @JsonAnySetter
    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }


    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     * 
     */
    @Generated("jsonschema2pojo")
    public enum Severity {

        INFO("Info"),
        UNKNOWN("Unknown"),
        LOW("Low"),
        MEDIUM("Medium"),
        HIGH("High"),
        CRITICAL("Critical");
        private final String value;
        private final static Map<String, Severity> CONSTANTS = new HashMap<String, Severity>();

        static {
            for (Severity c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        Severity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Severity fromValue(String value) {
            Severity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

}
