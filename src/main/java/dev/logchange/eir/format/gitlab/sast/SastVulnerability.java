
package dev.logchange.eir.format.gitlab.sast;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.logchange.eir.format.gitlab.Identifier;
import dev.logchange.eir.format.gitlab.Link;
import dev.logchange.eir.format.gitlab.Vulnerability;


/**
 * Describes the vulnerability using GitLab Flavored Markdown
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "id",
    "name",
    "description",
    "severity",
    "solution",
    "identifiers",
    "links",
    "details",
    "tracking",
    "flags",
    "location",
    "raw_source_code_extract"
})
@Generated("jsonschema2pojo")
public class SastVulnerability extends Vulnerability {

    /**
     * Identifies the vulnerability's location.
     * (Required)
     *
     */
    @JsonProperty("location")
    @JsonPropertyDescription("Identifies the vulnerability's location.")
    public Location location;
    /**
     * Provides an unsanitized excerpt of the affected source code.
     * 
     */
    @JsonProperty("raw_source_code_extract")
    @JsonPropertyDescription("Provides an unsanitized excerpt of the affected source code.")
    public String rawSourceCodeExtract;

}
